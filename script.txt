/// Téléchargement des données pour backtesting
from tradingbot.cotation import cotation_kraken
cota_k = cotation_kraken()
df, result = cota_k.get_trade_history('BATEUR', since=0)

/// Manipulation des assets et de leurs strategies

import matplotlib.pyplot as plt
from tradingbot.strategy import sma_strategy
from tradingbot.strategy import ema_strategy
from tradingbot.strategy import ichimoku_kinko_hyo_strategy
from tradingbot.cotation import cotation_kraken
from tradingbot.asset import asset_crypto
import pandas as pd
public_kraken = cotation_kraken()
sma_strat = sma_strategy('SMA', 12, 24)
ema_strat = ema_strategy('EMA', 12, 24)
ichimo_strat = ichimoku_kinko_hyo_strategy('ICHIMO')
XETHZ = asset_crypto(asset='ETH', cotation_place=public_kraken)
XETHZ.add_strategy(sma_strat)
XETHZ.add_strategy(ema_strat)
XETHZ.add_strategy(ichimo_strat)
returns = XETHZ.get_asset_return(1440, optimize=True, rolling_optimization=False, from_directory="backtesting")
pf.tears.create_full_tear_sheet(pd.Series(returns))


/// Manipulation d'un portefeuille avec un ensemble d'assets
from tradingbot.strategy import sma_strategy
from tradingbot.strategy import ema_strategy
from tradingbot.strategy import ichimoku_kinko_hyo_strategy
from tradingbot.cotation import cotation_kraken
from tradingbot.asset import asset_crypto
from tradingbot.portfolio import portfolio_manager
from tradingbot.account import kraken_account_wrapper
import matplotlib.pyplot as plt
import yaml
import pyfolio as pf
import os
import pandas as pd
os.environ['key'] = '++UMX5o2Y/wYNe6c5bh3RHkOhtsXQJgnWoKyKylfvLxH8EotobLKT5vP'
os.environ['secret'] = 'KObDBcajmeCLRGHmPUf4qhd0nO4yGd/B9ii47esXPIdsXKgyxTeHMmdxF/QpzMeNfbST4oPkJhAcPJc5e5ZpWQ=='
kraken_account = kraken_account_wrapper()
public_kraken = cotation_kraken()
my_portefolio = portfolio_manager(kraken_account)

sma_strat = sma_strategy('SMA', 12, 24)
ema_strat = ema_strategy('EMA', 12, 24)
ichimo_strat = ichimoku_kinko_hyo_strategy('ICHIMO')



with open(r'../../config.yml') as file:
    assets = yaml.load(file, Loader=yaml.FullLoader)['assets']
    for asset in assets:
        temp_asset = asset_crypto(asset=asset, cotation_place=public_kraken)
        temp_asset.add_strategy(sma_strat)
        temp_asset.add_strategy(ema_strat)
        temp_asset.add_strategy(ichimo_strat)
        my_portefolio.add_asset(temp_asset)

assets_returns = my_portefolio.get_assets_return(60)
weights = my_portefolio.get_weights(assets_returns.fillna(0))
weights = pd.DataFrame(weights.reshape(1, -1), columns=[col.split('_')[0] for col in assets_returns.columns])
weights = weights.T

